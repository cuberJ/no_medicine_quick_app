<import name="main-page-item" src="../MainPage/main-page-item.ux"></import>
<!-- 这个页面是主页面，是进入的主页总结构 -->
<template>
      <!-- 主页 -->
      <div class="main-page {{aboveAnim}}">
        <!-- <div class='header' onswipe='aboveSwipe'>
          <text class='span1'>安咳消</text>
          <text class='span2'>——your medicine reminder</text>
        </div> -->
        <tabs class="tabs" onchange="changeTabactive" index="{{activeIndex}}">
          <tab-bar class="tab-bar">
            <text class="tab-text">口服药</text>
            <text class="tab-text">外用药</text>
            <text class="tab-text">注射药</text>
          </tab-bar>
          <tab-content class="tab-content">

            <div class="item-container">
              <list class='todo-list'>
                <block for='{{eat_med}}'>
                  <list-item type="item">
                    <main-page-item item='{{$item}}' idx='{{$idx}}' medShow='点击查看药物图片' type='1'></main-page-item>
                  </list-item>
                </block>
              </list>
            </div>

            <div class="item-container">
              <list class='doing-list'>
                <block for='{{use_med}}' >
                  <list-item type="item">
                    <main-page-item item='{{$item}}' idx='{{$idx}}' type='2'></main-page-item>
                  </list-item>
                </block>
              </list>
            </div>

            <div class="item-container">
              <list class='done-list'>
                <block for='{{inject_med}}'>
                  <list-item type="item">
                    <main-page-item item='{{$item}}' idx='{{$idx}}' type='3'></main-page-item>
                  </list-item>
                </block>
              </list>
            </div>
          </tab-content>
        </tabs>
        <!-- 添加事项按钮 -->
        <div class='below'>
          <input class='add-btn' type="button" value='+' onclick="openInput('','ok','wow! no ddl!')"></input>
        </div>
      </div>
    </stack>
  </div>
</template>

<script>
import storage from '@system.storage'
import router from '@system.router'

export default {
  private: {
    aboveAnim: '',
    belowAnim: '',
    maskAnim: '',
    activeIndex: 1,
    eat_med: [
      { med_name: '替格瑞洛', dose: '一片', freq_choice:3 },
    ],
    use_med: [
      { med_name: '夫西地软膏', dose: '10mg', freq_choice:2 },
    ],
    inject_med: [
      { med_name: '胰岛素', dose: '10mL', freq_choice:1 },
    ]
  },

  onInit() {
    // storage.clear() 
    this.$page.setTitleBar({ text: '安咳消' });
   
    this.$on('delItem', (evt) => {
      if(evt.detail.type == "1")
        this.eat_med.splice(evt.detail.idx, 1)
      else if(evt.detail.type == "2")
        this.use_med.splice(evt.detail.idx, 1)
      else if(evt.detail.type == "3")
        this.inject_med.splice(evt.detail.idx, 1)
      this.saveLists()
      // idx是列表条目在列表中的序号，从0开始
    })

    this.$on('update', (evt) => {
      console.log(evt.detail.med_type, evt.detail.idx)
      var type = evt.detail.med_type;
      if(type == 1)
        this.eat_med[evt.detail.idx].isEaten = true;
      else if(type == 2)
        this.use_med[evt.detail.idx].isEaten = true;
      else if(type == 3)
        this.inject_med[evt.detail.idx].isEaten = true;
      this.saveLists();
  })
  },
  //每次显示页面时读取数据并绘制canvas
  onShow() {
    let that = this
    this.loadLists(function (data) {
      if (data != '') {
        let list = JSON.parse(data)
        that.eat_med = list.eat_med
        that.use_med = list.use_med
        that.inject_med = list.inject_med
        let nowDate = new Date()
        
        //最后保存list修改
    
        var time = new Date();
        var hour = time.getHours();
        var minute = time.getMinutes();
        that.eat_med.forEach(function (element, index){
          console.log('测试逐个输出的结果')
          console.log(element.med_name, element.time_show_sentence)
          var hour_temp = element.time_show_sentence.split(':')[0];
          var minute_temp = element.time_show_sentence.split(':')[1];
          hour_temp = Number(hour_temp)
          minute_temp = Number(minute_temp)
          //还没到吃药的时间，或者距离下次吃药的时间超过1小时，都是不标红警示的
          if((hour_temp > hour || (hour_temp == hour && minute_temp > minute)))
            element.isEaten = true;
          else if(hour_temp >= hour && (hour_temp - hour <= 1))
            element.isEaten = false;
          console.log(element.isEaten, hour_temp, hour, minute_temp, minute)
        })

        that.use_med.forEach(function (element, index){
          console.log('测试逐个输出的结果')
          console.log(element.med_name, element.time_show_sentence)
          var hour_temp = element.time_show_sentence.split(':')[0];
          var minute_temp = element.time_show_sentence.split(':')[1];
          hour_temp = Number(hour_temp)
          minute_temp = Number(minute_temp)
          if(hour_temp > hour || (hour_temp == hour && minute_temp > minute))
            element.isEaten = true;
          else
            element.isEaten = false;
          console.log(element.isEaten, hour_temp, hour, minute_temp, minute)
        })

        that.inject_med.forEach(function (element, index){
          console.log('测试逐个输出的结果')
          console.log(element.med_name, element.time_show_sentence)
          var hour_temp = element.time_show_sentence.split(':')[0];
          var minute_temp = element.time_show_sentence.split(':')[1];
          hour_temp = Number(hour_temp)
          minute_temp = Number(minute_temp)
          if(hour_temp > hour || (hour_temp == hour && minute_temp > minute))
            element.isEaten = true;
          else
            element.isEaten = false;
          console.log(element.isEaten, hour_temp, hour, minute_temp, minute)
        })
        that.saveLists()
      }
    })
  },

  // 切换tab
  changeTabactive(e) {
    this.activeIndex = e.index
  },

  //切换至新建页面
  openInput(name, start, end) {
    this.saveLists(function () {
      router.push({
        uri: '/Input',
        params: {
          pushName: name,
          pushStart: start,
          pushEnd: end,
          pushType: -1,
          pushIdx: -1
        }
      })
    })
  },

  //list需做备份时调用，需传入callback回调
  saveLists(voidCallback = function () { }) {
    let that = this
    let list = { eat_med: this.eat_med, use_med: this.use_med, inject_med: this.inject_med }
    storage.set({
      key: 'msg',
      value: list,
      success: voidCallback(),
      fail: function (data, code) {
        that.$app.$def.makeToast(`handling fail, code = ${code}`)
      }
    })
  },
  //list需读取时调用，需传入callback回调
  loadLists(dataCallback = function () { }) {
    let that = this
    storage.get({
      key: 'msg',
      success: function (data) {
        dataCallback(data)
      },
      fail: function (data, code) {
        that.$app.$def.makeToast(`handling fail, code = ${code}`)
      }
    })
  },

  //滑动切换
  aboveSwipe(dir) {
    if (dir.direction == 'left') {
      this.drawLineCanvas()
      this.drawTimeCanvas()
      this.aboveAnim = 'aboveForward'
      this.belowAnim = 'belowForward'
      this.maskAnim = 'maskForward'
    } else if (dir.direction == 'right' && this.aboveAnim != '') {
      this.aboveAnim = 'aboveReverse'
      this.belowAnim = 'belowReverse'
      this.maskAnim = 'maskReverse'
    }
  },
}
</script>

<style lang="less">
@import "../Common/css/font.css";

.header {
  height: 200px;
  width: 750px;
  background-color: #ffffff;
  flex-direction: column;
  .header-text {
    flex-direction: column;
    flex: 1;
    font-size: 40px;
    color: #000000;
    padding-left: 100px;
    font-weight: bold;
    text-align: left;
    font-family: myfont, serif;
  }
  .span1 {
    font-size: 40px;
    color: #000000;
    font-weight: bold;
    padding: 45px 0px 0px 100px;
    font-family: myfont, serif;
  }
  .span2 {
    font-size: 30px;
    color: #808080;
    padding: 20px 0px 0px 150px;
    font-family: myfont, serif;
  }
}
.main-page {
  background-color: rgb(243, 245, 250);
  flex-direction: column;
  .tabs {
    flex: 1;
    margin-top: 20px;
    margin-bottom: 20px;
    .tab-content {
      flex: 1;
    }
    .tab-bar {
      height: 100px;
      width: 600px;
      margin-left: 75px;
      background-color: #ffffff;
      border: 5px solid rgb(238, 240, 245);
      border-radius: 20px;
    }
    .tab-text {
      text-align: center;
      font-weight: bold;
      font-family: myfont-bold, serif;
      color: #808080;
    }
    .tab-text:active {
      color: #000000;
      font-weight: bold;
      font-family: myfont-bold, serif;
    }
    .tab-content {
      padding-top: 30px;
    }
  }
  .below {
    flex: 0;
    height: 150px;
    .add-btn {
      height: 100px;
      width: 100px;
      margin-left: 325px;
      margin-top: 10px;
      margin-bottom: 40px;
      background-color: #473cb1;
      border-radius: 25px;
      font-size: 50px;
      text-align: center;
      color: #ffffff;
    }
  }
}
.analyze-page {
  background-color: rgb(243, 245, 250);
  flex-direction: column;
  .canvas-container {
    flex: 1;
    flex-direction: column;
    #line-canvas {
      height: 350px;
      width: 750px;
    }
    #time-canvas {
      height: 350px;
      width: 750px;
    }
    .canvas-text {
      height: 70px;
      font-size: 30px;
      margin-left: 50px;
      padding-top: 30px;
      font-family: myfont, serif;
    }
  }
  .mask-container {
    flex-direction: column;
    .mask-area {
      margin-top: 70px;
      height: 350px;
      width: 750px;
      background-color: rgb(243, 245, 250);
    }
  }
}

/* forward animation */

.aboveForward {
  animation-name: aboveForward;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes aboveForward {
  from {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
  to {
    transform: translateX(-375px) rotateY(-90deg);
    opacity: 0;
  }
}

.belowForward {
  animation-name: belowForward;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes belowForward {
  from {
    transform: translateX(375px) rotateY(90deg);
    opacity: 0;
  }
  to {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
}

.maskForward {
  animation-name: maskForward;
  animation-duration: 600ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
  animation-delay: 600ms;
}

@keyframes maskForward {
  from {
    transform: translateX(0px);
  }
  to {
    transform: translateX(750px);
  }
}

/* reverse animation */

.aboveReverse {
  animation-name: aboveReverse;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes aboveReverse {
  from {
    transform: translateX(-375px) rotateY(-90deg);
    opacity: 0;
  }
  to {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
}

.belowReverse {
  animation-name: belowReverse;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes belowReverse {
  from {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
  to {
    transform: translateX(375px) rotateY(90deg);
    opacity: 0;
  }
}

.maskReverse {
  animation-name: maskReverse;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes maskReverse {
  from {
    transform: translateX(750px);
  }
  to {
    transform: translateX(0px);
  }
}
</style>
