<import name="main-page-item" src="../MainPage/main-page-item.ux"></import>
<!-- 这个页面是主页面，是进入的主页总结构 -->
<template>
      <!-- 主页 -->
      <div class="main-page {{aboveAnim}}">
        <!-- <div class='header' onswipe='aboveSwipe'>
          <text class='span1'>安咳消</text>
          <text class='span2'>——your medicine reminder</text>
        </div> -->
        <tabs class="tabs" onchange="changeTabactive" index="{{activeIndex}}">
          <tab-bar class="tab-bar">
            <text class="tab-text">口服药</text>
            <text class="tab-text">外用药</text>
            <text class="tab-text">注射药</text>
          </tab-bar>
          <tab-content class="tab-content">

            <div class="item-container">
              <list class='todo-list'>
                <block for='{{toDoList}}'>
                  <list-item type="item">
                    <main-page-item item='{{$item}}' idx='{{$idx}}' type='0'></main-page-item>
                  </list-item>
                </block>
              </list>
            </div>

            <div class="item-container">
              <list class='doing-list'>
                <block for='{{doingList}}'>
                  <list-item type="item">
                    <main-page-item item='{{$item}}' idx='{{$idx}}' type='1'></main-page-item>
                  </list-item>
                </block>
              </list>
            </div>

            <div class="item-container">
              <list class='done-list'>
                <block for='{{doneList}}'>
                  <list-item type="item">
                    <main-page-item item='{{$item}}' idx='{{$idx}}' type='2'></main-page-item>
                  </list-item>
                </block>
              </list>
            </div>
          </tab-content>
        </tabs>
        <!-- 添加事项按钮 -->
        <div class='below'>
          <input class='add-btn' type="button" value='+' onclick="openInput('','ok','wow! no ddl!')"></input>
        </div>
      </div>
    </stack>
  </div>
</template>

<script>
import storage from '@system.storage'
import router from '@system.router'

export default {
  private: {
    aboveAnim: '',
    belowAnim: '',
    maskAnim: '',
    activeIndex: 1,
    toDoList: [
      { name: '吃个饭', start: '2020-10-10&3:1', end: '2020-11-1&3:1' },
      { name: '刷个碗', start: '2020-8-28&12:15', end: '2021-1-1&12:16' }
    ],
    doingList: [
      { name: 'hahaha', start: '2020-7-26&1:56', end: '2020-7-28&1:56' },
      { name: 'doingTest2', start: '2019-12-20&10:15', end: '2020-10-26&11:30' },
      { name: 'doingTest1', start: '2020-7-27&1:23', end: '2020-7-28&1:23' },
      { name: '该歇了', start: '2020-6-15&8:1', end: '2020-8-15&9:2' }
    ],
    doneList: [
      { name: '我爱天大', start: '2020-7-27&1:23', end: '2020-7-28&1:23' }
    ]
  },

  onInit() {
    // storage.clear() 
    this.$page.setTitleBar({ text: '安咳消' })
    //完成事件（并存储）
    this.$on('doneItem', (evt) => {
      if (evt.detail.type == 0) {
        this.doneList.push(this.toDoList[evt.detail.idx])
        this.toDoList.splice(evt.detail.idx, 1)
      }
      else {
        this.doneList.push(this.doingList[evt.detail.idx])
        this.doingList.splice(evt.detail.idx, 1)
      }
      this.saveLists()
    })
    //删除事件（并存储）
    this.$on('delItem', (evt) => {
      this.doneList.splice(evt.detail.idx, 1)
      this.saveLists()
    })
  },
  //每次显示页面时读取数据并绘制canvas
  onShow() {
    let that = this
    this.loadLists(function (data) {
      if (data != '') {
        let list = JSON.parse(data)
        that.toDoList = list.toDoList
        that.doingList = list.doingList
        that.doneList = list.doneList
        let nowDate = new Date()
        //遍历toDoList,将其中已开始的（startTime小于当前时间的）任务归到doingList中
        that.toDoList.forEach(function (element, index) {
          let arr = element.start.replace(/[:\-\\&]/g, ',').split(',')
          let startDate = new Date(arr[0], arr[1] - 1, arr[2], arr[3], arr[4], 0, 0)
          if (nowDate.getTime() > startDate.getTime()) {
            that.doingList.push(that.toDoList[index])
            that.toDoList.splice(index, 1)
          }
        })
        //最后保存list修改
        that.saveLists()
      }
    })
  },

  // 切换tab
  changeTabactive(e) {
    this.activeIndex = e.index
  },

  //切换至新建页面
  openInput(name, start, end) {
    this.saveLists(function () {
      router.push({
        uri: '/Input',
        params: {
          pushName: name,
          pushStart: start,
          pushEnd: end,
          pushType: -1,
          pushIdx: -1
        }
      })
    })
  },

  //list需做备份时调用，需传入callback回调
  saveLists(voidCallback = function () { }) {
    let that = this
    let list = { toDoList: this.toDoList, doingList: this.doingList, doneList: this.doneList }
    storage.set({
      key: 'msg',
      value: list,
      success: voidCallback(),
      fail: function (data, code) {
        that.$app.$def.makeToast(`handling fail, code = ${code}`)
      }
    })
  },
  //list需读取时调用，需传入callback回调
  loadLists(dataCallback = function () { }) {
    let that = this
    storage.get({
      key: 'msg',
      success: function (data) {
        dataCallback(data)
      },
      fail: function (data, code) {
        that.$app.$def.makeToast(`handling fail, code = ${code}`)
      }
    })
  },

  //滑动切换
  aboveSwipe(dir) {
    if (dir.direction == 'left') {
      this.drawLineCanvas()
      this.drawTimeCanvas()
      this.aboveAnim = 'aboveForward'
      this.belowAnim = 'belowForward'
      this.maskAnim = 'maskForward'
    } else if (dir.direction == 'right' && this.aboveAnim != '') {
      this.aboveAnim = 'aboveReverse'
      this.belowAnim = 'belowReverse'
      this.maskAnim = 'maskReverse'
    }
  },
}
</script>

<style lang="less">
@import "../Common/css/font.css";

.header {
  height: 200px;
  width: 750px;
  background-color: #ffffff;
  flex-direction: column;
  .header-text {
    flex-direction: column;
    flex: 1;
    font-size: 40px;
    color: #000000;
    padding-left: 100px;
    font-weight: bold;
    text-align: left;
    font-family: myfont, serif;
  }
  .span1 {
    font-size: 40px;
    color: #000000;
    font-weight: bold;
    padding: 45px 0px 0px 100px;
    font-family: myfont, serif;
  }
  .span2 {
    font-size: 30px;
    color: #808080;
    padding: 20px 0px 0px 150px;
    font-family: myfont, serif;
  }
}
.main-page {
  background-color: rgb(243, 245, 250);
  flex-direction: column;
  .tabs {
    flex: 1;
    margin-top: 20px;
    margin-bottom: 20px;
    .tab-content {
      flex: 1;
    }
    .tab-bar {
      height: 100px;
      width: 600px;
      margin-left: 75px;
      background-color: #ffffff;
      border: 5px solid rgb(238, 240, 245);
      border-radius: 20px;
    }
    .tab-text {
      text-align: center;
      font-weight: bold;
      font-family: myfont-bold, serif;
      color: #808080;
    }
    .tab-text:active {
      color: #000000;
      font-weight: bold;
      font-family: myfont-bold, serif;
    }
    .tab-content {
      padding-top: 30px;
    }
  }
  .below {
    flex: 0;
    height: 150px;
    .add-btn {
      height: 100px;
      width: 100px;
      margin-left: 325px;
      margin-top: 10px;
      margin-bottom: 40px;
      background-color: #473cb1;
      border-radius: 25px;
      font-size: 50px;
      text-align: center;
      color: #ffffff;
    }
  }
}
.analyze-page {
  background-color: rgb(243, 245, 250);
  flex-direction: column;
  .canvas-container {
    flex: 1;
    flex-direction: column;
    #line-canvas {
      height: 350px;
      width: 750px;
    }
    #time-canvas {
      height: 350px;
      width: 750px;
    }
    .canvas-text {
      height: 70px;
      font-size: 30px;
      margin-left: 50px;
      padding-top: 30px;
      font-family: myfont, serif;
    }
  }
  .mask-container {
    flex-direction: column;
    .mask-area {
      margin-top: 70px;
      height: 350px;
      width: 750px;
      background-color: rgb(243, 245, 250);
    }
  }
}

/* forward animation */

.aboveForward {
  animation-name: aboveForward;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes aboveForward {
  from {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
  to {
    transform: translateX(-375px) rotateY(-90deg);
    opacity: 0;
  }
}

.belowForward {
  animation-name: belowForward;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes belowForward {
  from {
    transform: translateX(375px) rotateY(90deg);
    opacity: 0;
  }
  to {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
}

.maskForward {
  animation-name: maskForward;
  animation-duration: 600ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
  animation-delay: 600ms;
}

@keyframes maskForward {
  from {
    transform: translateX(0px);
  }
  to {
    transform: translateX(750px);
  }
}

/* reverse animation */

.aboveReverse {
  animation-name: aboveReverse;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes aboveReverse {
  from {
    transform: translateX(-375px) rotateY(-90deg);
    opacity: 0;
  }
  to {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
}

.belowReverse {
  animation-name: belowReverse;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes belowReverse {
  from {
    transform: translateX(0px) rotateY(0deg);
    opacity: 1;
  }
  to {
    transform: translateX(375px) rotateY(90deg);
    opacity: 0;
  }
}

.maskReverse {
  animation-name: maskReverse;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes maskReverse {
  from {
    transform: translateX(750px);
  }
  to {
    transform: translateX(0px);
  }
}
</style>
