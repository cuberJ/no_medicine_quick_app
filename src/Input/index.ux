<!-- 本页面是新增药物的输入页面 -->
<template>
  <div class="input-page">
    <div class='input-area'>
      <div class='ddl-area'>
        <div class="asr-input-area">
          <textarea style='padding-top:10px; padding-left: 20px;' placeholder='示例：倍他乐克一天三次，每次一片'  value="{{sentence}}" onchange="getSentence(1)"></textarea>
          <div class="asr-btn-area">
            <div class='asr-clear-btn' onclick='clearEventName("sentence")'>
              <text style="font-weight:bolder; font-size: 35px; color:white">清空</text>
            </div>
            <div class="{{enabled ? 'asr-image1-area-touch' : 'asr-image1-area'}}" ontouchstart="startAsr" ontouchend="endAsr">
              <div class='asr-image1-1'></div>
            </div>
            <!-- <div class='asr-submit-btn' onclick='addEvent'> -->
            <div class='asr-submit-btn' onclick='submitText'>
              <text style="font-weight:bolder; font-size: 35px; color:white">转换</text>
            </div>
          </div>
        </div>
      </div>

      <div style="flex-direction:row; left:15px;">
        <text class='normal-text'>药物名称</text>
        <!-- <input class="add-btn" type="button" value="完成" onclick="addEvent" /> -->
      </div>
      <!-- 药物名称、语音输入 -->
      <div class='event-input'>
        <input type="text" placeholder='示例：倍他乐克' value="{{med_name}}" onchange="getSentence(2)"></input>
        
        <div class='clear-btn' onclick='clearEventName("med_name")'></div>
        <div class='asr-image1' onclick='enableAsrBtn'></div>
      </div>

      <div class="med-eat-method">
        <!-- 药物的类型 -->
        <div class='ddl-area'>
          <text class="normal-text">药物类型</text>
          
          <div class='med-type'>
                <div class="med-type-name">
                  <input type="radio" name='med' value="mouth" class="type" onclick="medType(1)" checked="{{medtype1}}">
                  <div class='asr-image2' id='koufu'></div>
                  <text class="name" >口服药</text>
                </div>
                <div class="med-type-name">
                  <input type="radio" value='外用药' class="type" name="med" onclick="medType(2)" checked="{{medtype2}}">
                  <div class='asr-image2' id="waiyong"></div>
                  <text class="name">外用药</text>
                </div>
                <div class="med-type-name">
                  <input type="radio" value='注射药' class="type" name="med" onclick="medType(3)" checked="{{medtype3}}">
                  <div class='asr-image2' id="zhushe"></div>
                  <text class="name">注射药</text>
                </div>
          </div>
        </div>

        <!-- 输入服用的频率 -->
        <div class='ddl-area'>
          <text class='normal-text'>服用次数</text>
        
        <div class='med-type'>
                <div class="med-type-freq">
                  <input type="radio" name='freq' id="freq_choice_1" value="一日一次" class="type" checked="{{freq_choice[0]}}" onclick="display_1">
                  <text class="name" >每日1次</text>
                </div>
                <div class="med-type-freq">
                  <input type="radio" value='一日两次' class="type" id="freq_choice_2" name="freq" onclick="display_2" checked="{{freq_choice[1]}}">
                  <text class="name">每日2次</text>
                </div>
                <div class="med-type-freq">
                  <input type="radio" value='一日三次' class="type" id="freq_choice_3" name="freq" onclick="display_3" checked="{{freq_choice[2]}}">
                  <text class="name">每日3次</text>
                </div>
                <div class="med-type-freq">
                  <input type="radio" class="type" name="freq" id="freq_choice_4" onclick="display_4" checked="{{freq_choice[3]}}">
                  <text class="name">每日4次</text>
                </div>
          </div>
        </div>
        
      </div>

      <!-- 输入每次服用药物的剂量 -->
      <div class='ddl-area'>
        <text class="normal-text">单次剂量</text>
        <div class='event-input'>
          <input type="text" placeholder='示例：1片/100mg/10mL' value="{{dose}}" onchange="getSentence(3)"></input>
        <div class='clear-btn' onclick='clearEventName("dose")'></div>
        </div>
      </div>

      <!-- 输入药物的服用时间 -->
      <!-- 依据每日服用次数修改eat-time-input 的display属性 -->
      <div class='ddl-area'>
        <div class="serve-title">
          <text class="normal-text">服用时间</text>
          <div class="alarm">
            <input type="radio" class="type" name="alarm" onclick="alarm_func_able" checked="true">
            <text class="name">打开闹钟</text>
            <input type="radio" class="type" name="alarm" onclick="alarm_func_disable">
            <text class="name">关闭闹钟</text>
          </div>
        </div>
        <div class='time-area'>
          <div class="{{eat_enable_1 ? 'eat-time-input' : 'eat-time-input-disable'}}" id='eat_input_1'>
            <div class='time-input'>
              <picker class='time-picker' id='picker_1' type="time" value="{{end_time_1}}" onchange="getEndTime_1"></picker>
              <div class='time-image'></div>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_1"  onclick="beforeDinner(1)"  checked="{{isBeforeDinner[0]}}">
                  <text class="name">饭前</text>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_1" onclick="afterDinner(1)" checked="{{!isBeforeDinner[0]}}">
                  <text class="name">饭后</text>
            </div>
          </div>
          <div class="{{eat_enable_2 ? 'eat-time-input' : 'eat-time-input-disable'}}" id='eat_input_2'>
            <div class='time-input'>
              <picker class='time-picker' id='picker_2' type="time" value="{{end_time_2}}" onchange="getEndTime_2"></picker>
              <div class='time-image'></div>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_2"  onclick="beforeDinner(2)" checked="{{isBeforeDinner[1]}}">
                  <text class="name">饭前</text>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_2" onclick="afterDinner(2)" checked="{{!isBeforeDinner[1]}}">
                  <text class="name">饭后</text>
            </div>
          </div>
          <div class="{{eat_enable_3 ? 'eat-time-input' : 'eat-time-input-disable'}}" id='eat_input_3'>
            <div class='time-input'>
              <picker class='time-picker' id='picker_3' type="time" value="{{end_time_3}}" onchange="getEndTime_3"></picker>
              <div class='time-image'></div>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_3"  onclick="beforeDinner(3)" checked="{{isBeforeDinner[2]}}">
                  <text class="name">饭前</text>
            </div>
            <div class="med-type-freq" >
                  <input type="radio" class="type" name="dinner_3" onclick="afterDinner(3)" checked="{{!isBeforeDinner[2]}}">
                  <text class="name">饭后</text>
            </div>
          </div>
          <div class="{{eat_enable_4 ? 'eat-time-input' : 'eat-time-input-disable'}}" id='eat_input_4'>
            <div class='time-input'>
              <picker class='time-picker' id='picker_4' type="time" value="{{end_time_4}}" onchange="getEndTime_4"></picker>
              <div class='time-image'></div>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_4"  onclick="beforeDinner(4)" checked="{{isBeforeDinner[3]}}">
                  <text class="name">饭前</text>
            </div>
            <div class="med-type-freq">
                  <input type="radio" class="type" name="dinner_4" onclick="afterDinner(4)" checked="{{!isBeforeDinner[3]}}">
                  <text class="name">饭后</text>
            </div>
          </div>
        </div>
      </div>

      <!-- 拍照存储 -->
      <div class='ddl-area'>
        <div>
          <text class="normal-text">图鉴封面</text>
        </div>
        <div class='event-input' style="height: 300px;">
          <image class="image" style="resize-mode:fill" src="{{takePhotoUri}}" id='image'
                show="{{takePhotoUri != ''}}" onclick="requestFullscreen"></image>
        </div>

        <div class="photo-area">
          <input class="add-btn" type="button" value="拍照" onclick="takephoto" />
          <input class="add-btn" type="button" value="选取" onclick="pickImage" />
        </div>
      </div>

      <!-- 语音输入按钮 -->
      <div class="asr-btn {{scale}} {{enabled ? 'asr-btn-enabled' : 'asr-btn-disabled'}}" ontouchstart="startAsr" ontouchend="endAsr">
          <div class='asr-image2'></div>
      </div>

      <!-- 提交按钮 -->
      <div class="submit_btn" onclick="addEvent">
        <text>提交</text>
      </div>

    </div>
  </div>
</template>

<script>
import asr from '@service.asr'
import storage from '@system.storage'
import vibrator from '@system.vibrator'
import router from '@system.router'
import notification from '@system.notification'
import alarm from '@system.alarm' 
import media from '@system.media'
import file from '@system.file';
import prompt from '@system.prompt';

var count = 0;
export default {
  private: {
    sentence: '倍他乐克一天三次，每次一片',
    nameBackUp: '',
    start_date: '',
    start_time: '',
    end_date: '',
    end_time_1: '8:00',
    end_time_2: '14:00',
    end_time_3: '20:00',
    end_time_4: '18:00',
    time_choice : 1,
    alarm_enable : true,
    med_name: '',
    dose: '', //单次服用剂量 
    med_type: "", //药物的类型，1口服，2外用，3注射
    medtype1: false,
    medtype2: false,
    medtype3: false,
    freq_choice:[true, false, false, false],
    isBeforeDinner: [true, true, true, true],
    eat_enable: [true, false, false, false],

    checked: false,
    enabled: false,
    eat_enable_1: true,
    eat_enable_2: false,
    eat_enable_3: false,
    eat_enable_4: false,
    scale: '',
    pickImageUri: '',
    takePhotoUri: '',
    image: '',
    time_show: 0, 
    time_show_sentence: ''
  },
  //修改任务时使用，新建时不使用
  protected: {
    pushName: '',
    pushType: '',
    pushIdx: '',
    push_dose: '',
    push_freq: 1,
    pushEatTime: 1,
    pushEnabled: true,
    push_isBeforeDinner_1: true,
    push_isBeforeDinner_2: true,
    push_isBeforeDinner_3: true,
    push_isBeforeDinner_4: true,
    push_time_1: "",
    push_time_2: "",
    push_time_3: "",
    push_time_4: "",
    pushCover: '',
  },

  onInit() {
    this.$page.setTitleBar({ text: '新增药物' })
    this.initAsr()
    this.med_name = this.pushName;
    this.med_type = Number(this.pushType);
    this.medType(this.med_type)
    this.takePhotoUri = this.pushCover;
    // if(this.takePhotoUri != "")
    // {
    //   file.get({
    //     uri: this.takePhotoUri,
    //     success: function(data) {
    //       console.log(data.uri)
    //       console.log(data.length)
    //       console.log(data.lastModifiedTime)
    //     },
    //     fail: function(data, code) {
    //       console.log(`handling fail, code = ${code}`)
    //     }
    //   })
    // }
    this.freq_choice = [false, false, false, false];
    
    this.freq_choice[this.push_freq - 1] = true;
    this.dose = this.push_dose;
    // this.eat_enable = this.push_eat_enable;
    this.time_choice = this.pushEatTime;
    this.time_choice = Number(this.time_choice)
    if(this.time_choice == 1)
      this.eat_enable_1 = true;
    if(this.time_choice >= 2)
      this.eat_enable_2 = true;
    if(this.time_choice >= 3)
      this.eat_enable_3 = true;
    if(this.time_choice >= 4)
      this.eat_enable_4 = true;
    this.freq_choice[this.time_choice - 1] = true;
    this.alarm_enable = Boolean(this.pushEnabled);
    if(this.alarm_enable == false)
    {
      this.eat_enable_1 = false;
      this.eat_enable_2 = false;
      this.eat_enable_3 = false;
      this.eat_enable_4 = false;
    }
    this.end_time_1 = this.push_time_1;
    this.end_time_2 = this.push_time_2;
    this.end_time_3 = this.push_time_3;
    this.end_time_4 = this.push_time_4;
    if(this.push_isBeforeDinner_1 == "false")
      this.isBeforeDinner[0] = false;
    else if(this.push_isBeforeDinner_1 == "true")
      this.isBeforeDinner[0] = true;

    if(this.push_isBeforeDinner_2 == "false")
      this.isBeforeDinner[1] = false;
    else if(this.push_isBeforeDinner_2 == "true")
      this.isBeforeDinner[1] = true;

    if(this.push_isBeforeDinner_3 == "false")
      this.isBeforeDinner[2] = false;
    else if(this.push_isBeforeDinner_3 == "true")
      this.isBeforeDinner[2] = true;

    if(this.push_isBeforeDinner_4 == "false")
      this.isBeforeDinner[3] = false;
    else if(this.push_isBeforeDinner_4 == "true")
      this.isBeforeDinner[3] = true;
  },
  onDestroy() {
    asr.close()
  },

  //初始化picker显示内容（from为当前时间，to为一天后）
  initTime() {
    const date = new Date()
    const Y = date.getFullYear()
    const M = date.getMonth() + 1
    const D = date.getDate()
    const H = date.getHours()
    const m = date.getMinutes()
    this.start_date = Y + '-' + M + '-' + D
    this.start_time = H + ':' + m
    date.setTime(date.getTime() + 24 * 60 * 60 * 1000)
    const TY = date.getFullYear()
    const TM = date.getMonth() + 1
    const TD = date.getDate()
    const TH = date.getHours()
    const Tm = date.getMinutes()
    this.end_date = TY + '-' + TM + '-' + TD
    // this.end_time_1 = TH + ':' + Tm
  },

  initAsr() {
    let that = this
    asr.init({
      fail: function () {
        that.$app.$def.makeToast('init failed!')
      }
    })
    asr.onpartialresult = ({ result }) => {
      this.sentence = this.nameBackUp + `${result}`;
    }
    asr.oncompleteresult = ({ result }) => {
      this.sentence = this.nameBackUp + `${result.match(/\[(.*)\]/)[1]}`;
    }
    asr.onerror = (error) => {
      this.text = `onerror: ${error}`
    }
  },
  startAsr() {
    let that = this;
    this.scale = 'scale';
    this.nameBackUp = this.sentence;
    that.enabled = true;
    asr.start({
      success: function () {
        //多调用几遍使震动明显一些
        that.sentence = '';
        vibrator.vibrate({ mode: 'short' })
        vibrator.vibrate({ mode: 'short' })
        vibrator.vibrate({ mode: 'short' })
      },
      fail: function (data, code) {
        that.sentence = `start fail, code=${code}, data=${data}`
      }
    })
  },
  endAsr() {
    let that = this;
    this.scale = 'stop';
    that.enabled = false;
    asr.stop({
      success: function () { },
      fail: function (data, code) {
        that.sentence = `stop fail, code=${code}, data=${data}`
      }
    })
  },

  updateValue(evt) {
    this.sentence = evt.value
    console.log(evt);
  },
  clearEventName(e) {
    if(e === "sentence")
      this.sentence = '';
    else if(e === 'med_name')
      this.med_name = '';
    else if(e === "dose")
      this.dose = '';
    else
      return
   },

  addEvent() {
    if (this.med_name === '') {
      this.$app.$def.makeToast('error: medicine name must not be null')
    }
    else {
      let start = this.start_date + '&' + this.start_time
      let end = this.checked ? 'wow! no ddl!' : (this.end_date + '&' + this.end_time_1)
      let that = this
      storage.get({
        key: 'msg',
        success: function (data) {
          if (that.med_name != '') {
            // string转数组
            let list = JSON.parse(data)
            
            //修改事项时触发
            if (that.pushType == "1") list.eat_med.splice(that.pushIdx, 1);
            else if (that.pushType == "2") list.use_med.splice(that.pushIdx, 1);
            else if (that.pushType == "3") list.inject_med.splice(that.pushIdx, 1);
           
            var temps = that.takePhotoUri.replace('internal://', '')
            temps = "internal://files/" + temps;
            

            var cur_time = new Date();
            var hour = cur_time.getHours();
            var minute = cur_time.getMinutes();

            var hour_1 = Number(that.end_time_1.split(':')[0])
            var minute_1 = Number(that.end_time_1.split(':')[1])
            var hour_2 = Number(that.end_time_2.split(':')[0])
            var minute_2 = Number(that.end_time_2.split(':')[1])
            var hour_3 = Number(that.end_time_3.split(':')[0])
            var minute_3 = Number(that.end_time_3.split(':')[1])
            var hour_4 = Number(that.end_time_4.split(':')[0])
            var minute_4 = Number(that.end_time_4.split(':')[1])
            var hour_max = 0
            var min_max = 0
            if(that.time_choice == 1)
            {
              hour_max = hour_1;
              min_max = minute_1;
            }
            else if(that.time_choice == 2)
            {
              hour_max = hour_2;
              min_max = minute_2;
            }
            else if(that.time_choice == 3)
            {
              hour_max = hour_3;
              min_max = minute_3;
            }
            else if(that.time_choice == 4)
            {
              hour_max = hour_4;
              min_max = minute_4;
            }

            if((hour < hour_1) || (hour == hour_1 && minute <= minute_1) || (hour > hour_max) || (hour == hour_max && minute > min_max))
            {
              that.time_show = 0;
            }
            else if(((hour < hour_2) || (hour == hour_2 && minute <= minute_2)) && (that.time_choice >= 2))
              that.time_show = 1;
            else if(((hour < hour_3) || (hour == hour_3 && minute <= minute_3)) && (that.time_choice >= 3))
              that.time_show = 2;
            else if(((hour < hour_4) || (hour == hour_4 && minute <= minute_4)) && (that.time_choice >= 4))
              that.time_show = 3;
            if(that.time_show == 0)
              that.time_show_sentence = that.end_time_1;
            else if(that.time_show == 1)
              that.time_show_sentence = that.end_time_2;
            else if(that.time_show == 2)
              that.time_show_sentence = that.end_time_3;
            else if(that.time_show == 3)
              that.time_show_sentence = that.end_time_4;
            console.log('闹钟设置', that.eat_enable_1, that.alarm_enable, that.eat_enable_1 == true)
            if(that.eat_enable_1 == true && that.alarm_enable == true)
            {
              console.log('我进来了', hour_1, minute_1, that.med_name)
              alarm.setAlarm({
                hour: hour_1,
                minute: minute_1,
                message: that.med_name,
                days:[0,1,2,3,4,5,6],
                success: function() {
                  console.log('handling success')
                },
                fail: function(data, code) {
                    console.log(`handling fail, code = ${code}, errorMsg=${data}`)
                },
              })
            }

            if(that.eat_enable_2 == true && that.alarm_enable == true)
              alarm.setAlarm({
                hour: hour_2,
                minute: minute_2,
                message: that.med_name,
                days:[0,1,2,3,4,5,6],
                success: function() {
                  console.log('handling success')
                },
                fail: function(data, code) {
                    console.log(`handling fail, code = ${code}, errorMsg=${data}`)
                },
              })

            if(that.eat_enable_3 == true && that.alarm_enable == true)
              alarm.setAlarm({
                hour: hour_3,
                minute: minute_3,
                message: that.med_name,
                days:[0,1,2,3,4,5,6],
                success: function() {
                  console.log('handling success')
                },
                fail: function(data, code) {
                    console.log(`handling fail, code = ${code}, errorMsg=${data}`)
                },
              })
            console.log('闹钟设置', that.eat_enable_4, that.alarm_enable, that.eat_enable_4 == true)
            if(that.eat_enable_4 == true && that.alarm_enable == true)
            {
              alarm.setAlarm({
                hour: hour_4,
                minute: minute_4,
                message: that.med_name,
                days:[0,1,2,3,4,5,6],
                success: function() {
                  console.log('handling success')
                },
                fail: function(data, code) {
                    console.log(`handling fail, code = ${code}, errorMsg=${data}`)
                },
              })
            }


            let info = {med_name: that.med_name, 
                        med_type: that.med_type, 
                        dose: that.dose, 
                        freq_choice: that.time_choice, 
                        alarm_1: that.end_time_1,
                        alarm_2: that.end_time_2,
                        alarm_3: that.end_time_3,
                        alarm_4: that.end_time_4,
                        isBeforeDinner_1: that.isBeforeDinner[0],
                        isBeforeDinner_2: that.isBeforeDinner[1],
                        isBeforeDinner_3: that.isBeforeDinner[2],
                        isBeforeDinner_4: that.isBeforeDinner[3],
                        alarm_enable: that.alarm_enable,
                        time_choice: that.time_choice,
                        cover: (that.takePhotoUri === "" ? "" : temps),
                        enabled: that.enabled,
                        time_1: that.end_time_1,
                        time_2: that.end_time_2,
                        time_3: that.end_time_3,
                        time_4: that.end_time_4,
                        time_show: that.time_show,
                        time_show_sentence: that.time_show_sentence,
                        isEaten: false,
                                }
            if(that.med_type == 1)
            {
              list.eat_med.push(info);
            }
            else if(that.med_type == 2){
              list.use_med.push(info);
            }
            else{
              list.inject_med.push(info)
            }

            if(that.takePhotoUri != "")
            {
              file.copy({
                srcUri: that.takePhotoUri,
                dstUri: temps,
                success: function(uri) {
                  console.log(`photomove success: ${uri}`)
                },
                fail: function(data, code) {
                  console.log(`movehandling fail, code = ${code}`);
                }
              })
            }
        
            storage.set({
              key: 'msg',
              value: list,
              success: function () {
                that.sentence = ''
                console.log('数据存储完毕')
                vibrator.vibrate({
                  mode: 'short'
                })
                router.back()
              },
              fail: function (data, code) {
                that.$app.$def.makeToast(`handling fail, code = ${code}`)
              }
            });
          }
        },
        fail: function (data, code) {
          that.$app.$def.makeToast(`handling fail, code = ${code}`)
        }
      })
    }
  },

  //以下为picker组件的函数
  getStartDate(e) {
    this.start_date = e.year + '-' + (e.month + 1) + '-' + e.day
  },
  getStartTime(e) {
    this.start_time = e.hour + ':' + e.minute
  },
  getEndDate(e) {
    this.end_date = e.year + '-' + (e.month + 1) + '-' + e.day
  },
  getEndTime_1(e) {
    this.end_time_1 = e.hour + ':' + e.minute
  },
  getEndTime_2(e) {
    this.end_time_2 = e.hour + ':' + e.minute
  },
  getEndTime_3(e) {
    this.end_time_3 = e.hour + ':' + e.minute
  },
  getEndTime_4(e) {
    this.end_time_4 = e.hour + ':' + e.minute
  },
  
  //切换是否no ddl
  turnChecked() {
    this.checked = !this.checked
  },
  //显示语音输入按钮
  enableAsrBtn() {
    this.enabled = !this.enabled
  },
  
  alarmNotify(hour, minute){
      alarm.setAlarm({
        hour: hour,
        minute: minute
      })
  },

  // 依据服用次数修改服用时间
  display_1(){
    if(this.alarm_enable === true)
    {
      this.eat_enable_1 = true;
      this.eat_enable_2 = false;
      this.eat_enable_3 = false;
      this.eat_enable_4 = false;
     
    }
     this.time_choice = 1;
  },
  display_2(){
    if(this.alarm_enable === true)
    {
      this.eat_enable_1 = true;
      this.eat_enable_2 = true;
      this.eat_enable_3 = false;
      this.eat_enable_4 = false;
      this.end_time_2 = '14:00';
    }
    this.time_choice = 2;
  },
  display_3(){
    if(this.alarm_enable === true)
    {
      this.eat_enable_1 = true;
      this.eat_enable_2 = true;
      this.eat_enable_3 = true;
      this.eat_enable_4 = false;
      this.end_time_2 = '14:00';
      this.end_time_3 = '20:00';
      
    }
    this.time_choice = 3;
  },
  display_4(){
    if(this.alarm_enable === true)
    {
      this.eat_enable_1 = true;
      this.eat_enable_2 = true;
      this.eat_enable_3 = true;
      this.eat_enable_4 = true;
      this.end_time_1 = '8:00';
      this.end_time_2 = '13:00';
      this.end_time_3 = '18:00';
      this.end_time_4 = '23:00';
      
    }
    this.time_choice = 4;
  },

  //修改药物的种类信息
  medType(index)
  {
    this.med_type = index;
    this.medtype1 = false;
    this.medtype2 = false;
    this.medtype3 = false;
    if(index == 1)
      this.medtype1 = true;
    else if(index == 2)
      this.medtype2 = true;
    else if(index == 3)
      this.medtype3 = true;
  },

  // 启用闹钟功能
  alarm_func_able(){
    this.alarm_enable = true;
    if(this.time_choice === 1) 
      this.display_1();
    else if(this.time_choice === 2)
      this.display_2();
    else if(this.time_choice === 3)
      this.display_3();
    else
      this.display_4();
  },

  alarm_func_disable(){
    this.alarm_enable = false;
    
    this.eat_enable_1 = false;
    this.eat_enable_2 = false;
    this.eat_enable_3 = false;
    this.eat_enable_4 = false;
    
  },

  // 拍照功能
  takephoto(){
    media.takePhoto({
        success: (data) => {
            console.log("handling success: " + data.uri);
             file.delete({
                uri: this.takePhotoUri,
                success: function(data) {
                  console.log('handling success')
                },
                fail: function(data, code) {
                  console.log(`handling fail, code = ${code}`)
              }
              })
            this.takePhotoUri = data.uri;
        },
        cancel: () => {
            prompt.showToast({
                message: '拍照已取消',
                duration: 0
            });
        },
        fail: (data, code) => {
            prompt.showToast({
                message: 'fail msg:' + data + " code:" + code,
                duration: 0
            });
        },
        complete: () => {

        }
    })
  },

  // 选择照片
  pickImage() {
   
    media.pickImage({
        success: (data) => {
            console.log("handling success: " + data.uri);
            //this.pickImageUri = data.uri;
             file.delete({
                uri: this.takePhotoUri,
                success: function(data) {
                  console.log('handling success')
                },
                fail: function(data, code) {
                  console.log(`handling fail, code = ${code}`)
              }
              })
            this.takePhotoUri = data.uri;
            console.log("handling success: " + this.takePhotoUri);
            prompt.showToast({
                message: 'uri:' + this.takePhotoUri,
                duration: 0
            });
        }
    })
  },

  //正则处理语音输入的文本
  submitText(){
    var basic = new RegExp(".+[一每1]+天.*[1234567890一二三四五六七八九十零两]+[次回].*[(每次)(每回)(每下)(一次)(1次)][1234567890一二三四五六七八九十百千零两]+.*");
    var all_words = this.sentence.match(basic);
    if(all_words === null)
      {
        prompt.showToast({
        message:'输入内容格式错误，请重新录入'
      })
        return;
      }

    var basic_info_reg = new RegExp(".+[一每1]+天.*[1234567890一二三四五六七八九十两]+[次回]");
    var basic_info = all_words[0].match(basic_info_reg);
    
    var freq_reg = new RegExp("[1234567890一二三四五六七八九十两]+[次回]");
    var freq = String(basic_info[0]).match(freq_reg)
    
    var med_name = basic_info[0].split(/[一每1]+天/);
    med_name = med_name[0];

    var number = all_words[0].replace(basic_info[0], '')
    
    number = number.match(/[\d一二三四五六七八九十百千两]+.*/);
    
    var dict = {'一':1, '二':2, '三':3, '四':4, '五':5, '六':6, '七':7, '八':8, '九':9, '零':0, '十':10, '两':2};
    
    if(String(freq[0]).search(/\d/) === -1)
    {
      freq = dict[freq[0][0]];
      
    }
    else
    {
      freq = freq[0].match(/\d/)[0];
     
      freq = Number(freq);
    }
    this.freq_choice = [false, false, false, false];
    switch(freq)
      {
        case 1: {
          this.display_1();
          this.freq_choice[0] = true;
          break;
          }
        case 2: {
          this.display_2();
          this.freq_choice[1] = true;
          break;
          }
        case 3: {
          this.display_3();
          this.freq_choice[2] = true;
          break;
          }
        case 4: {
          this.display_4();
          this.freq_choice[3] = true;
          break;
          }
        default:{
          this.display_4();
          this.freq_choice[3] = true;
        }
      }
    this.med_name = med_name;
    this.dose = number[0];
    this.sentence = '';
    prompt.showToast({
      message:'转换成功'
    })
  },
  //记录是否在饭前吃药
  beforeDinner(number){
    this.isBeforeDinner[number-1] = true;
  },

  afterDinner(number){
    this.isBeforeDinner[number-1] = false;
  },

  getSentence(index, e){
    if(index == 1)
      this.sentence = e.value;
    else if(index == 2)
      this.med_name = e.value;
    else if(index == 3)
      this.dose = e.value;
  },

  requestFullscreen(){
    let that = this
    media.previewImage({
      current: that.takePhotoUri,
      uris: [that.takePhotoUri],
      success: function() {
      console.log('preview success')
      },
      fail: function(data, code) {
        console.log('preview fail, code = ${code}');
      }
    })
    
  }
}
</script>

<style lang="less">
@import "../Common/css/font.css";

/* 主Widget树 */
.input-page {
  flex-direction: column;
  > text {
    height: 300px;
    font-size: 40px;
    color: #000000;
    background-color: #ffffff;
    font-weight: bold;
    text-align: center;
    font-family: myfont-bold, serif;
  }
  .input-area {
    flex: 1;
    padding-left: 50px;
    padding-right: 50px;
    flex-direction: column;
    background-color: rgb(243, 245, 250);
    .task-area {
      flex-direction: row;
      .add-btn {
        width: 150px;
        height: 80px;
        font-size: 35px;
        border-radius: 25px;
        color: #ffffff;
        background-color: #473cb1;
        align-self: flex-end;
        margin-bottom: 15px;
        margin-left: 100px;
      }
    }
  }

  .photo-area{
    flex: 1;
    flex-direction: row;
    margin: 20px;
  }

  .add-btn{
    width: 150px;
    height: 80px;
    font-size: 35px;
    border-radius: 25px;
    color: #ffffff;
    background-color: #473cb1;
    align-self: flex-end;
    margin-bottom: 10px;
    margin-left: 100px;
  }
  .med-eat-method{
    flex-direction: row;
  }
    .ddl-area {
      flex-direction: column;
      margin: 15px;
      .serve-title{
        flex-direction: row;
        .alarm{
          weight:200px;
          .name{
            font-weight: bold;
            color: rgb(227, 129, 129);
            font-size: 25px;
            font-family: myfont, serif;
          }
        }
      }
      .ddl {
        font-size: 25px;
        color: #000000;
        margin-top: 5px;
        flex-wrap: nowrap;
        font-family: myfont, serif;
      }
      .med-type{
        flex-direction: column;
        .type{
          flex-direction: row;
        }
        #koufu{
           background-image : url('./../../assets/images/红药丸.png');
        }
        #waiyong{
          background-image : url('./../../assets/images/外用药.png');
        }
        #zhushe{
          background-image : url('./../../assets/images/注射器.png');
        }
        .name{
          font-weight: bold;
          font-family: myfont-bold, serif;
          color: #808080;
          padding-left: 20px;
        }
        .med-type-freq{
          padding-bottom: 10px;
          min-width: 100px;
        }
       }
      }
    
    .event-input {
      height: 100px;
      border-radius: 20px;
      background-color: #ffffff;
      justify-content: center;
      border: 5px solid rgb(238, 240, 245);
      flex-direction: row;
      > input {
        flex-grow: 1;
        padding: 10px 30px;
      }
      >image{

      }
    }

    .asr-input-area{
      height: 300px;
      border-radius: 20px;
      background-color: #ffffff;
      border: 5px solid rgb(238, 240, 245);
      flex-direction: column;
      
      > textarea {
        font-size: 30px;
        height: 200px;
      }
      .asr-btn-area{
        flex-direction: row;
        
        justify-content: space-between;
        .asr-clear-btn{
          height: 100px;
          background-color: #FF6666;
          border-radius: 20px;
          width: 20%;
          display: flex;
          justify-content: center;
          align-items: center;
          margin-bottom: 10px;
          .clear-btn-1{
            width: 40px;
            height: 40px;
            border-width: 0px;
            flex-shrink: 0;
            background-image: url("/Common/cancle.png");
          }
        }

        .asr-submit-btn{
          height: 100px;
          background-color: #66CC66;
          border-radius: 20px;
          width: 20%;
          display: flex;
          justify-content: center;
          align-items: center;
          margin-bottom: 10px;
        }
      }
      .asr-image1-area{
          background-color: #6699CC;
          border-radius: 20px;
          width: 70%;
          height: 100px;
          display: flex;
          justify-content: center;
          align-items: center;
          padding-bottom: 10px;
          .asr-image1-1{
            width: 40px;
            height: 40px;
            border-width: 0px;
            flex-shrink: 0;
            background-image: url("/Common/asr.png");
          }
        }
    

    .asr-image1-area-touch{
          background-color: #144577;
          border-radius: 20px;
          width: 70%;
          height: 100px;
          display: flex;
          justify-content: center;
          align-items: center;
          padding-bottom: 10px;
          .asr-image1-1{
            width: 40px;
            height: 40px;
            border-width: 0px;
            flex-shrink: 0;
            background-image: url("/Common/asr.png");
          }
        }
    }

    .time-area {
      flex-direction: column;
      .eat-time-input{
          display: inline;
      }
      .eat-time-input-disable{
        display: none;
      }
      .time-input {
        flex-direction: row;
        height: 100px;
        width: 350px;
        border-radius: 20px;
        margin-bottom: 10px;
        background-color: #ffffff;
        border: 3px solid rgb(238, 240, 245);
        .date-picker {
          width: 180px;
          margin-left: 50px;
          flex: 0;
          font-family: myfont, serif;
          
        }
        .time-picker {
          width: 100px;
          margin-left: 120px;
          flex: 1;
          font-weight: bolder;
          font-family: myfont, serif;
          
        }
        .date-image {
          width: 40px;
          height: 40px;
          margin: 30px 25px 30px 5px;
          border-width: 0px;
          background-image: url("/Common/calendar.png");
        }
        .time-image {
          width: 40px;
          height: 40px;
          margin: 30px 15px 30px 5px;
          border-width: 0px;
          background-image: url("/Common/time.png");
        }
      }
      > text {
        width: 120px;
        font-size: 30px;
        text-align: center;
        font-family: myfont, serif;
      }
    }
    .asr-btn {
      flex: 0;
    }
  }


.normal-text {
  padding-top: 30px;
  padding-bottom: 30px;
  width: 300px;
  flex-wrap: nowrap;
  font-size: 35px;
  font-weight: bold;
  font-family: myfont-bold, serif;
  color: #000000;
}

/* 按钮、图片 */
.btn-check {
  width: 50px;
  height: 50px;
  margin: 50px 10px 25px 225px;
  border-radius: 25px;
  border-width: 2px;
  border-color: #808080;
}

.btn-checked {
  border-width: 0px;
  background-image: url("/Common/checked.png");
}

.asr-image1 {
  width: 40px;
  height: 40px;
  margin: 28px 25px 0px 0px;
  border-width: 0px;
  flex-shrink: 0;
  background-image: url("/Common/asr.png");
}

.asr-image2 {
  width: 40px;
  height: 40px;
  margin: 20px 0px 20px 20px;
  border-width: 0px;
  /* background-image: url("/Common/asr.png"); */
}

.clear-btn {
  width: 40px;
  height: 40px;
  margin: 30px 30px 30px 0px;
  border-width: 0px;
  flex-shrink: 0;
  background-image: url("/Common/cancle.png");
}

.asr-btn-enabled {
  flex: 0;
  height: 120px;
  width: 120px;
  border-radius: 60px;
  border-width: 5px;
  border-color: rgb(238, 240, 245);
  align-self: center;
  margin-top: 70px;
  background-color: #ffffff;
}

.asr-btn-disabled {
  height: 0px;
  width: 0px;
}

.submit_btn{
  background-color: #267444;
  border-radius: 20px;
  width: 70%;
  height: 80px;
  margin: 30px;
  left: 70px;
  display: flex;
  justify-content: center;
  align-items: center;
  padding-bottom: 10px;
  >text{
    font-size: 30px;
    font-weight: bolder;
    color: white;
  }
}

/* 动画 */
.scale {
  animation-name: scale;
  animation-duration: 200ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes scale {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.6);
  }
}

.stop {
  animation-name: stop;
  animation-duration: 100ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}

@keyframes stop {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1);
  }
}
</style>
